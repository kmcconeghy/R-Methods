[
["index.html", "R-methods Preface", " R-methods Kevin W. McConeghy 2017-03-31 Preface "],
["heteroskedastic-cluster-robust-standard-errors.html", "Chapter 1 Heteroskedastic &amp; Cluster Robust Standard Errors 1.1 Introduction 1.2 R’s calculation of standard errors 1.3 Heteroskedascity 1.4 Clustering 1.5 Stata comparison 1.6 Cluster robust errors in R 1.7 Block bootstrapping 1.8 Acknowledgements 1.9 Bibliography", " Chapter 1 Heteroskedastic &amp; Cluster Robust Standard Errors 1.1 Introduction In this chapter we are evaluating R’s capability to compute standard errors. Overall like most things, R has substantial capacity but its flexibility can be daunting. To bring this flexibility down to earth, I lay out the background, provide practical recommendations, user-written commands and benchmark to STATA. 1.1.1 Packages to use R version 3.3.2 (2016-10-31) Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 10 x64 (build 14393) attached base packages: [1] stats graphics grDevices utils datasets base other attached packages: [1] boot_1.3-18 lmtest_0.9-35 zoo_1.7-14 [4] sandwich_2.3-4 Scotty_0.0.0.9000 Hmisc_4.0-2 [7] Formula_1.2-1 survival_2.40-1 lattice_0.20-34 [10] dplyr_0.5.0 purrr_0.2.2 readr_1.1.0 [13] tidyr_0.6.1 tibble_1.2 ggplot2_2.2.1 [16] tidyverse_1.1.1 “Scotty” is my own package. “tidyverse” is Wickam et al. general suite of packages/commands to work with R. “Hmisc” is Frank Harrel’s miscellaneous commands, many of which are quite useful. “sandwich”, “lmtest” and “boot” are specifically relevant to this chapter in order to compute various standard errors (SE). 1.1.2 Test Data The cluster data was obtained from: http://www.kellogg.northwestern.edu/faculty/petersen/htm/papers/se/test_data.txt 1.1.3 Other References 1.2 R’s calculation of standard errors 1.3 Heteroskedascity Angrist and Pischke (2008) 1.4 Clustering Bertrand M (2004) 1.5 Stata comparison A full discussion of STATA programming can be seen here: http://www.kellogg.northwestern.edu/faculty/petersen/htm/papers/se/se_programming.htm STATA blog: http://www.stata.com/support/faqs/statistics/standard-errors-and-vce-cluster-option/ Briefly: In Stata one can specify a variance-covariance matrix that is heteroskedastic consistent with the vce(robust) option in regression models. e.g. robust option in STATA regress y x z, vce(robust) A Huber-White variance-covariance matrix can also be computed by some group with the vce(cluster group) option in regression models. e.g. cluster option in STATA regress y x z, vce(cluster group) See: http://www.stata.com/support/faqs/statistics/standard-errors-and-vce-cluster-option/ ## Heteroskedastic consistent errors in R 1.6 Cluster robust errors in R 1.7 Block bootstrapping An alternative to computing special variance-covariance matrices is non-parametric “block” bootstrapping. To do this, you perform a bootstrapping procedure where you sample the group or “block” instead of unit observation. This has been shown to be about as consistent and unbiased as the above sandwich estimators, and may be advantgeous when the number of clusters is small.Bertrand M (2004) 1.7.1 Bootstrap Program Boot.ATE &lt;- function (model, treat, R = 250, block = &quot;&quot;, df) { require(boot) require(dplyr) family &lt;- model$family if (block == &quot;&quot;) { boot.mod &lt;- function(x, i, model, treat) { samp.df &lt;- x[i, ] samp.glm &lt;- try(glm(model, data = samp.df, family = family)) if (inherits(samp.glm, &quot;try-error&quot;)) { coef &lt;- NA ate &lt;- NA rr &lt;- NA c(coef, ate, rr) } else { df2 &lt;- samp.df df2[, paste(treat)] = 1 pred1. &lt;- predict.glm(samp.glm, newdata = df2, type = &quot;response&quot;) df2[, paste(treat)] = 0 pred0. &lt;- predict.glm(samp.glm, newdata = df2, type = &quot;response&quot;) coef &lt;- samp.glm$coefficients[paste0(treat)] ate &lt;- mean(pred1.) - mean(pred0.) rr &lt;- mean(pred1.)/mean(pred0.) c(coef, ate, rr) } } boot.m &lt;- boot(data = df, statistic = boot.mod, R = R, model = model, treat = treat) } else { Groups = unique(df[, paste(block)]) boot.mod &lt;- function(x, i, model, treat, df, block, iter = 0) { block.df &lt;- data.frame(group = x[i]) names(block.df) = block samp.df &lt;- left_join(block.df, df, by = block) samp.glm &lt;- try(glm(model, data = samp.df, family = family)) if (inherits(samp.glm, &quot;try-error&quot;)) { coef &lt;- NA ate &lt;- NA rr &lt;- NA c(coef, ate, rr) } else { df2 &lt;- samp.df df2[, paste(treat)] = 1 pred1. &lt;- predict.glm(samp.glm, newdata = df2, type = &quot;response&quot;) df2[, paste(treat)] = 0 pred0. &lt;- predict.glm(samp.glm, newdata = df2, type = &quot;response&quot;) coef &lt;- samp.glm$coefficients[paste0(treat)] ate &lt;- mean(pred1.) - mean(pred0.) rr &lt;- mean(pred1.)/mean(pred0.) c(coef, ate, rr) } } boot.m &lt;- boot(data = Groups, statistic = boot.mod, R = R, model = model, treat = treat, df = df, block = block) } m1.confint &lt;- c(model$coefficients[paste0(treat)], confint(model, treat, level = 0.95)) coeff = boot.ci(boot.m, index = 1, type = &quot;perc&quot;) coeff = c(median(boot.m$t[, 1]), coeff$percent[, 4], coeff$percent[, 5]) names(coeff) &lt;- c(&quot;Coeff.&quot;, &quot;2.5%&quot;, &quot;97.5%&quot;) ate = boot.ci(boot.m, index = 2, type = &quot;perc&quot;) ate = c(median(boot.m$t[, 2]), ate$percent[, 4], ate$percent[, 5]) names(ate) &lt;- c(&quot;ATE&quot;, &quot;2.5%&quot;, &quot;97.5%&quot;) rr = boot.ci(boot.m, index = 3, type = &quot;perc&quot;) rr = c(median(boot.m$t[, 3]), rr$percent[, 4], rr$percent[, 5]) names(rr) &lt;- c(&quot;Rr&quot;, &quot;2.5%&quot;, &quot;97.5%&quot;) boot.iter = boot.m$t res = list(level = 0.95, model_ci = m1.confint, coeff = coeff, ate = ate, rr = rr, boots = boot.iter) return(res) } 1.8 Acknowledgements This chapter is heavily adapted from several StackExchange and other blog posts. See: http://www.richard-bluhm.com/clustered-ses-in-r-and-stata-2/ http://www.kellogg.northwestern.edu/faculty/petersen/htm/papers/standarderror_extra_tables.pdf https://sites.google.com/site/waynelinchang/r-code http://www.kellogg.northwestern.edu/faculty/petersen/htm/papers/se/test_data.htm https://thetarzan.wordpress.com/2011/05/28/heteroskedasticity-robust-and-clustered-standard-errors-in-r/ 1.9 Bibliography R Core Team (2016) References "],
["diving-in.html", "Chapter 2 Diving In", " Chapter 2 Diving In Now let’s talk details. "]
]
