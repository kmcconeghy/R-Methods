[
["index.html", "R-methods Preface 0.1 Setup for Rmd documents", " R-methods Kevin W. McConeghy 2017-03-30 Preface 0.1 Setup for Rmd documents require(tidyverse) require(Hmisc) require(Scotty) knitrSet(lang=&#39;markdown&#39;, h=4.5) mu &lt;- markupSpecs$html # markupSpecs is in Hmisc cap &lt;- mu$cap # function to output html caption lcap &lt;- mu$lcap # for continuation for long caption # These last 2 functions are used by the putHfig function in Hmisc "],
["heteroskedastic-cluster-robust-standard-errors.html", "Chapter 1 Heteroskedastic &amp; Cluster Robust Standard Errors 1.1 R’s calculation of standard errors 1.2 Heteroskedascity 1.3 Clustering 1.4 Stata comparison 1.5 Heteroskedastic consistent errors in R 1.6 Cluster robust errors in R 1.7 Block bootstrapping 1.8 Computer Session", " Chapter 1 Heteroskedastic &amp; Cluster Robust Standard Errors require(&quot;tidyverse&quot;) ## Loading required package: tidyverse ## Warning: package &#39;tidyverse&#39; was built under R version 3.3.3 ## Loading tidyverse: ggplot2 ## Loading tidyverse: tibble ## Loading tidyverse: tidyr ## Loading tidyverse: readr ## Loading tidyverse: purrr ## Loading tidyverse: dplyr ## Warning: package &#39;readr&#39; was built under R version 3.3.3 ## Conflicts with tidy packages ---------------------------------------------- ## filter(): dplyr, stats ## lag(): dplyr, stats require(&quot;sandwich&quot;) ## Loading required package: sandwich require(&quot;lmtest&quot;) ## Loading required package: lmtest ## Warning: package &#39;lmtest&#39; was built under R version 3.3.3 ## Loading required package: zoo ## ## Attaching package: &#39;zoo&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## as.Date, as.Date.numeric require(&quot;boot&quot;) ## Loading required package: boot 1.1 R’s calculation of standard errors 1.2 Heteroskedascity 1.3 Clustering 1.4 Stata comparison In Stata, one can specify a variance-covariance matrix that is heteroskedastic consistent with the vce(robust) option in regression models. e.g. STATA example regress y x z, vce(robust) A Huber-White variance-covariance matrix can also be computed with a cluster option by some group with the vce(cluster(group)) option in regression models. e.g. STATA example regress y x z, vce(cluster(group)) 1.5 Heteroskedastic consistent errors in R 1.6 Cluster robust errors in R 1.7 Block bootstrapping An alternative to computing special variance-covariance matrices is non-parametric “block” bootstrapping. To do this, you perform a bootstrapping procedure where you sample the group or “block” instead of unit observation. This has been shown to be about as consistent and unbiased as the above sandwich estimators, and may be advantgeous when the number of clusters is small.(Insert Bertrand citation). 1.7.1 Bootstrap Program Boot.ATE &lt;- function (model, treat, R = 250, block = &quot;&quot;, df) { require(boot) require(dplyr) family &lt;- model$family if (block == &quot;&quot;) { boot.mod &lt;- function(x, i, model, treat) { samp.df &lt;- x[i, ] samp.glm &lt;- try(glm(model, data = samp.df, family = family)) if (inherits(samp.glm, &quot;try-error&quot;)) { coef &lt;- NA ate &lt;- NA rr &lt;- NA c(coef, ate, rr) } else { df2 &lt;- samp.df df2[, paste(treat)] = 1 pred1. &lt;- predict.glm(samp.glm, newdata = df2, type = &quot;response&quot;) df2[, paste(treat)] = 0 pred0. &lt;- predict.glm(samp.glm, newdata = df2, type = &quot;response&quot;) coef &lt;- samp.glm$coefficients[paste0(treat)] ate &lt;- mean(pred1.) - mean(pred0.) rr &lt;- mean(pred1.)/mean(pred0.) c(coef, ate, rr) } } boot.m &lt;- boot(data = df, statistic = boot.mod, R = R, model = model, treat = treat) } else { Groups = unique(df[, paste(block)]) boot.mod &lt;- function(x, i, model, treat, df, block, iter = 0) { block.df &lt;- data.frame(group = x[i]) names(block.df) = block samp.df &lt;- left_join(block.df, df, by = block) samp.glm &lt;- try(glm(model, data = samp.df, family = family)) if (inherits(samp.glm, &quot;try-error&quot;)) { coef &lt;- NA ate &lt;- NA rr &lt;- NA c(coef, ate, rr) } else { df2 &lt;- samp.df df2[, paste(treat)] = 1 pred1. &lt;- predict.glm(samp.glm, newdata = df2, type = &quot;response&quot;) df2[, paste(treat)] = 0 pred0. &lt;- predict.glm(samp.glm, newdata = df2, type = &quot;response&quot;) coef &lt;- samp.glm$coefficients[paste0(treat)] ate &lt;- mean(pred1.) - mean(pred0.) rr &lt;- mean(pred1.)/mean(pred0.) c(coef, ate, rr) } } boot.m &lt;- boot(data = Groups, statistic = boot.mod, R = R, model = model, treat = treat, df = df, block = block) } m1.confint &lt;- c(model$coefficients[paste0(treat)], confint(model, treat, level = 0.95)) coeff = boot.ci(boot.m, index = 1, type = &quot;perc&quot;) coeff = c(median(boot.m$t[, 1]), coeff$percent[, 4], coeff$percent[, 5]) names(coeff) &lt;- c(&quot;Coeff.&quot;, &quot;2.5%&quot;, &quot;97.5%&quot;) ate = boot.ci(boot.m, index = 2, type = &quot;perc&quot;) ate = c(median(boot.m$t[, 2]), ate$percent[, 4], ate$percent[, 5]) names(ate) &lt;- c(&quot;ATE&quot;, &quot;2.5%&quot;, &quot;97.5%&quot;) rr = boot.ci(boot.m, index = 3, type = &quot;perc&quot;) rr = c(median(boot.m$t[, 3]), rr$percent[, 4], rr$percent[, 5]) names(rr) &lt;- c(&quot;Rr&quot;, &quot;2.5%&quot;, &quot;97.5%&quot;) boot.iter = boot.m$t res = list(level = 0.95, model_ci = m1.confint, coeff = coeff, ate = ate, rr = rr, boots = boot.iter) return(res) } 1.8 Computer Session "],
["diving-in.html", "Chapter 2 Diving In", " Chapter 2 Diving In Now let’s talk details. "]
]
